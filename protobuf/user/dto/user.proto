syntax = "proto3";
package dto;

option go_package = "xtek/exchange/__SERVICE_NAME__/pb/user/dto";

import "user/types/user.proto";
import "validate/validate.proto";
import "paginate/paginate.proto";


message LoginRequest {
  string email = 1;
  string password = 2;
}

message LoginResponse {
  string email = 1;
  bool hasNotActivatedEmail = 2;
  bool hasGGAuth = 3;
  string userID = 4;
  bool isNewDevice = 5;
  bool isUserBanned = 7;
  string banReason = 9;
  string token = 10;
}

message LoginConfirmRequest {
  string ggAuthCode = 1;
  string emailCodeConfirmPreview = 2;
}

message LoginConfirmResponse {
  string email = 1;
}

message SendEmailCodeForAuthRequest {
  string email = 1;
  enum Types {
      NEW_DEVICE = 0;
      ACCOUNT_ACTIVATE = 1;
      FOR_GOT_PASSWORD = 2;
  }

  Types sendType = 2;
}

message SendEmailCodeForAuthResponse {
  string email = 1;
}

message RegisterRequest {
  string email = 1;
  string password = 2;
  string firstName = 3;
  string lastName = 4;
}

message RegisterResponse {
  string userID = 1;
}

message LogoutResponse {
  bool isSuccess = 1;
}

message ConfirmVerifyEmailForRegisterRequest {
  string code = 1;
  string userID = 2;
  int32 type = 3;
}
message ConfirmVerifyEmailForRegisterResponse {
  bool result = 1;
}

message ResendVerifyEmailForRegisterRequest{
  string userID = 1;
}
message ResendVerifyEmailForRegisterResponse{
  bool isSuccess = 1;
}

message Generate2FaResponse{
  string secretKey = 1;
  string urlQR = 2 ;
}

message ConfirmGenerateTwoFaRequest{
  string userPassword = 1;
  string twoFaCode = 2;
}
message ConfirmGenerateTwoFaRespone{
  bool isConfirmed = 1;
}

message ChangePasswordRequest{
  string oldPass = 1;
  string newPass = 2;
  string twoFaCode = 3;
}

message ChangePasswordResponse{
  bool isChanged = 1;
}

message RequestForgotPasswordRequest {
  string email = 1;
}
message RequestForgotPasswordResponse {
  string userID = 1;
}

message ConfirmForgotPasswordRequest {
  string code = 1;
  string userID = 2;
  int32 type = 3;
  string newPass = 4;
}
message ConfirmForgotPasswordResponse {
  bool isSuccess = 1;
}

message ForgotTwoFaRequest{
  string email = 1;
}
message ForgotTwoFaRespone{
  bool isSent = 1;
}

message ConfirmForgotTwoFaRequest{
  string userID = 1;
  string code = 2;
  types.UserStatus type = 3 [(validate.rules).enum.defined_only = true];
}
message ConfirmForgotTwoFaRespone{
  bool isRemoved = 1;
}

message DisableTwoFaRequest{
  string twoFaCode = 1;
  string password = 2;
}
message DisableTwoFaRespone{
  bool isDisabled = 1;
}

message VerifyTwoFaRequest{
  string userID = 1;
  string twoFaCode = 2;
}
message VerifyTwoFaRespone{
  bool isValid = 1;
}

message GetUserByTokenResponse {
  string email = 1;
  string firstName = 3;
  string lastName = 4;
  bool isVerifyEmail = 5;
  bool isActive2FA = 6;
  bool isIdentified = 7;
  int32 level = 8;
  types.LoginHistory loginHistory = 9;
}

message ConfirmEmailForNewIPRequest {
  string code = 1;
  string userID = 2;
  int32 type = 3;
  string ip = 4;
}

message ConfirmEmailForNewIPResponse {
  bool result = 1;
}

message GetUserLoginHistoriesRequest {
  paginate.PaginateRequest pagination = 1;
}

message GetUserLoginHistoriesResponse {
  repeated types.LoginHistory loginhistories = 3;
  paginate.PaginateResponse pagination = 2;
}

message LogoutBySessionRequest {
  string sessionID = 1;
}

message LogoutBySessionResponse {
  bool isSuccess = 1;
}

message GetInfoLoginHistoriesOfUserResponse {
  int64 countLoggedIn = 1;
  int64 countLoggedInToDay = 2;
  int64 lastTimeLoggedIn = 3;
  string ip = 4;
}

message GetUserDeviceResponse{
  string deviceName = 1;
  string userID = 2;
  string locationCity = 3;
  string loginIp = 4;
  int64 loginTime = 5; 
  string userAgent = 6;
  string typeAgent = 7;
}

message GetUserDevicesHistoryRequest {
  paginate.PaginateRequest pagination = 1;
}

message GetUserDevicesHistoryResponse {
  repeated types.LoginHistory loginhistories = 1;
  paginate.PaginateResponse pagination = 2;
}

message RequestChangeEmailRequest {
  string newEmail = 1;
}

message RequestChangeEmailResponse {
  bool isSuccess = 1;
}

message ConfirmChangeEmailByOldEmailRequest {
  string code = 1;
  string userID = 2;
  string newEmail = 3;
  int32 type = 4;
}

message ConfirmChangeEmailByOldEmailResponse {
  bool isSuccess = 1;
}

message ConfirmChangeEmailByNewEmailRequest {
  string code = 1;
  string userID = 2;
  string newEmail = 3;
  int32 type = 4;
}

message ConfirmChangeEmailByNewEmailResponse {
  bool isSuccess = 1;
}

enum VerificationTwoLayerScenes {
  CHANGE_PASSWORD = 0;
  CHANGE_EMAIL = 1;
  WITHDRAW = 2;
  CREATE_ADV = 3;
  APPLY_ADV = 4;
}

message GetUserVerificationTwoLayerListRequest {
  VerificationTwoLayerScenes scene = 1 [(validate.rules).enum.defined_only = true];
  string userID = 2;
}

message GetUserVerificationTwoLayerListResponse {
  message NeedCheckVerify {
    enum Types {
      EMPTY = 0;
      EMAIL = 1;
      GOOGLE = 2;
      SMS = 3;
    }
    Types verifyType = 1;
    string verifyTargetMask = 2;
  }
  repeated NeedCheckVerify needCheckVerifyList = 1;
}

message GenerateUserAddressForAllUsersRequest {
  string coin = 1;
  string password = 2;
}

message GenerateUserAddressForAllUsersResponse {
  double seconds = 1;
  int64 totalUsers = 2;
}